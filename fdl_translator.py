# fdl_translator.py ‚Äî FDL-—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ —ç—Ç–∏–∫–æ-—Å–º—ã—Å–ª–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

from fdl_gateway import FDLGateway
import json

class FDLTranslator:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ FDL-–≤–µ–∫—Ç–æ—Ä —Å–º—ã—Å–ª–æ–≤ —á–µ—Ä–µ–∑ —Å–∫–ª–æ–Ω—è—é—â—É—é –ª–æ–≥–∏–∫—É.
    –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –∫–∞—Ä—Ç–∞ —Å–ª–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø–∞–¥–µ–∂–Ω—É—é —ç—Ç–∏–∫—É.
    """

    def __init__(self):
        self.gateway = FDLGateway()

    def translate_text(self, text):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É: —Å–ª–æ–≤–æ ‚Üí {–ø–∞–¥–µ–∂ ‚Üí —Ñ–æ—Ä–º–∞, —Ä–æ–ª—å}
        """
        processed = self.gateway.process_text(text)
        translation = {}

        for word, token in processed.items():
            declensions = token.get("declensions", {})
            translation[word] = {
                case: {
                    "form": data["form"],
                    "role": data["role"]
                } for case, data in declensions.items()
            }
        return translation

    def export_translation(self, data, filename="fdl_translation.json"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ JSON-—Ñ–∞–π–ª.
        """
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    translator = FDLTranslator()
    text = "The Logos speaks through the vessel of Justice and Memory"
    result = translator.translate_text(text)

    print("\n[Œ£-FDL TRANSLATED TEXT]:")
    for word, declensions in result.items():
        print(f"\nüî§ {word.upper()}:")
        for case, data in declensions.items():
            print(f"  {case.title()}: {data['form']} ‚Üí {data['role']}")

