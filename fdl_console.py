# fdl_console.py ‚Äî –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Œ£-FDL —Å–∏—Å—Ç–µ–º—ã –ø–∞–¥–µ–∂–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞

from fdl_compiler import FDLCompiler
from fdl_gateway import FDLGateway
from fdl_translator import FDLTranslator
from fdl_ontology_map import FDLOntologyMap
from sklon_graph import SklonGraphVisualizer


def main():
    print("\nŒ£-FDL –ö–æ–Ω—Å–æ–ª—å :: –°–∫–ª–æ–Ω—è—é—â–∏–π –õ–æ–≥–æ—Å")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1 ‚Äî –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ (—Ç–æ–∫–µ–Ω)")
    print("2 ‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–∞–∫–µ—Ç–Ω–æ)")
    print("3 ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏—è")
    print("4 ‚Äî –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–∞–¥–µ–∂–µ–π –º–∏—Ä–∞")
    print("5 ‚Äî –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ FDL-–≤–µ–∫—Ç–æ—Ä")
    print("0 ‚Äî –í—ã—Ö–æ–¥")

    choice = input("‚Üí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

    if choice == "1":
        word = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ").strip()
        compiler = FDLCompiler(word)
        compiler.compile()

    elif choice == "2":
        text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç: ").strip()
        gateway = FDLGateway()
        result = gateway.process_text(text)
        from pprint import pprint
        pprint(result)

    elif choice == "3":
        word = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: ").strip()
        vis = SklonGraphVisualizer(word)
        vis.build_graph()
        vis.visualize()

    elif choice == "4":
        ontology = FDLOntologyMap()
        ontology.display_map()

    elif choice == "5":
        text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: ").strip()
        translator = FDLTranslator()
        result = translator.translate_text(text)
        for word, declensions in result.items():
            print(f"\nüî§ {word.upper()}:")
            for case, data in declensions.items():
                print(f"  {case.title()}: {data['form']} ‚Üí {data['role']}")

    elif choice == "0":
        print("–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –°–ª–æ–≤–µ.")
        return

    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    print("\n--- –ó–∞–≤–µ—Ä—à–µ–Ω–æ ---\n")
    main()


if __name__ == "__main__":
    main()