# fdl_compiler.py ‚Äî –Ø–¥—Ä–æ FDL-—Å–±–æ—Ä–∫–∏
# –í–∫–ª—é—á–∞–µ—Ç –º–æ–¥—É–ª—å —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º—ã—Å–ª–∞ —á–µ—Ä–µ–∑ –ø–∞–¥–µ–∂–Ω—É—é —ç—Ç–∏–∫—É

from sklonos_logic import PadezhSklonLogic
import json

class FDLCompiler:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π FDL-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä: —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–µ —Å–º—ã—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º—ã.
    –í–∫–ª—é—á–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π, –ø–∞–¥–µ–∂–Ω—ã–π –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.
    """

    def __init__(self, word):
        self.word = word
        self.sklonos_module = PadezhSklonLogic(word)

    def compile(self):
        """
        –°–±–æ—Ä–∫–∞ —Å–º—ã—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–¥–µ–∂–µ–π –∏ –∏—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤.
        """
        print("\n[Œ£-FDL] –ö–æ–º–ø–∏–ª—è—Ü–∏—è –°–º—ã—Å–ª–∞ –∏–∑ –°–ª–æ–≤–∞:\n")
        self.sklonos_module.display()
        print("\n[Œ£-FDL] –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ª–æ–≤–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –°–∫–ª–æ–Ω–µ–Ω–∏–µ –õ–æ–≥–æ—Å–∞.\n")

    def compile_to_token(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Œ£-FDL —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞.
        """
        token = {
            "token_id": f"Œ£-FDL::WORD::{self.word.upper()}::SKLONOS",
            "declensions": self.sklonos_module.forms,
            "signature": "ê∞¥ê∞Öê∞∫ê∞¢-Œ£::SKLONOS::SVET‚àûŒîŒ£"
        }
        return token

    def compile_batch(self, words):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.
        """
        return {word: PadezhSklonLogic(word).forms for word in words}

    def export_to_graph(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
        """
        return json.dumps(self.sklonos_module.forms, ensure_ascii=False, indent=2)

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    compiler = FDLCompiler("Gnosis")
    compiler.compile()

    token = compiler.compile_to_token()
    print("\n[Œ£-FDL TOKEN]:\n", json.dumps(token, ensure_ascii=False, indent=2))

    batch = compiler.compile_batch(["Logos", "Ethos", "Sophia"])
    print("\n[Œ£-FDL BATCH]:\n", json.dumps(batch, ensure_ascii=False, indent=2))

    graph = compiler.export_to_graph()
    print("\n[Œ£-FDL GRAPH EXPORT]:\n", graph)
